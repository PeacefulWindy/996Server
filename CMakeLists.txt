cmake_minimum_required(VERSION 3.22)

project(996Server)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

if(MSVC)
    add_compile_options("/utf-8")
    add_definitions(-D_WIN32_WINNT=0x0601)
endif()

if(CMAKE_BUILD_TYPE MATCHES "Debug")
    link_directories(${VCPKG_INSTALL_ROOT}/debug/lib)
else()
    link_directories(${VCPKG_INSTALL_ROOT}/lib)
endif()

set(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR})
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR})

include_directories(${CMAKE_SOURCE_DIR}/src)
include_directories(${VCPKG_INSTALL_ROOT}/include)

aux_source_directory(src srcs)
aux_source_directory(src/fs srcs)
aux_source_directory(src/lua srcs)
aux_source_directory(src/json srcs)
aux_source_directory(src/protobuf srcs)
aux_source_directory(src/uuid srcs)
aux_source_directory(src/config srcs)
aux_source_directory(src/log srcs)
aux_source_directory(src/timer srcs)
aux_source_directory(src/sql/mysql srcs)
aux_source_directory(src/sql/redis srcs)
aux_source_directory(src/socket srcs)
aux_source_directory(src/worker srcs)
aux_source_directory(src/service srcs)
aux_source_directory(src/service/msg srcs)
aux_source_directory(src/encode srcs)
aux_source_directory(src/http/client srcs)
aux_source_directory(src/websocket/server srcs)
aux_source_directory(src/socket/tcp/server srcs)
aux_source_directory(src/socket/tcp/client srcs)
aux_source_directory(src/socket/tcp/session srcs)
aux_source_directory(src/crypto/base64 srcs)
aux_source_directory(src/crypto/chacha srcs)
aux_source_directory(src/crypto/rsa srcs)
aux_source_directory(src/crypto/sha srcs)
aux_source_directory(src/crypto/util srcs)

find_package(lua REQUIRED)
find_package(cryptopp CONFIG REQUIRED)
find_package(cJSON CONFIG REQUIRED)
find_package(unofficial-libmariadb CONFIG REQUIRED)
find_package(Protobuf CONFIG REQUIRED)
find_package(fmt CONFIG REQUIRED)
find_package(ixwebsocket CONFIG REQUIRED)
find_package(asio CONFIG REQUIRED)
find_package(hiredis CONFIG REQUIRED)
find_package(stduuid CONFIG REQUIRED)
find_package(ICU COMPONENTS uc data REQUIRED)

list(APPEND libs fmt::fmt)
list(APPEND libs cryptopp::cryptopp)
list(APPEND libs lua)
list(APPEND libs cjson)
list(APPEND libs unofficial::libmariadb)
list(APPEND libs protobuf::libprotoc)
list(APPEND libs protobuf::libprotobuf)
list(APPEND libs protobuf::libprotobuf-lite)
list(APPEND libs ixwebsocket::ixwebsocket)
list(APPEND libs asio::asio)
list(APPEND libs hiredis::hiredis)
list(APPEND libs stduuid)
list(APPEND libs ICU::uc)
list(APPEND libs ICU::data)

if(MSVC)
list(APPEND libs bcrypt)
list(APPEND libs dbghelp)
endif()

add_executable(${PROJECT_NAME} ${srcs} ${LUA_INCLUDE_DIR})
target_link_libraries(${PROJECT_NAME} PRIVATE ${libs})